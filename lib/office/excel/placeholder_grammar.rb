#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'


module Office
  class PlaceholderGrammar < Racc::Parser

module_eval(<<'...end placeholder_grammar.racc/module_eval...', 'placeholder_grammar.racc', 96)
  def initialize
    super
    @field_path = []
    @keywords = {}
    @functors = {}
  end

  attr_reader :field_path
  attr_accessor :image_extent

  # really these have the same function but different syntaxes so keep them separate
  attr_accessor :keywords
  attr_accessor :functors

  def to_h
    {
      field_path: field_path,
      image_extent: image_extent,
      keywords: keywords,
      functors: functors,
    }
  end

  def yydebug; true end

  DQUOTE_RX = /"([^"\\]|\\["\\\/bfnrt])*?"/
  SQUOTE_RX = /'([^'\\]|\\['\\\/bfnrt])*?'/
  LRQUOTE_RX = /[“”]([^'\\]|\\['\\\/bfnrt])*?[“”]/

  # The lexer.
  def self.tokenize line
    return enum_for __method__, line unless block_given?

    s = StringScanner.new line
    case
      when s.scan(/true/); yield [:true, 'true']
      when s.scan(/false/); yield [:false, 'false']
      when s.scan(/(\d+)x(\d+)/i)
        yield :NUMBER, s.captures[0]
        yield ?x, ?x
        yield :NUMBER, s.captures[1]

      # hoop-jupming to handle keywords with:
      # - bare symbols eg 'separator: ;'
      # - unquoted values eg 'date_time_format: %d &m %y'
      when s.scan(/:(?>\s*)([^'"“”\[].*?)\s*([,}])/)
        yield ?:, ?:
        yield :MAGIC_QUOTED, s.captures[0]
        yield s.captures[1], s.captures[1]

      when s.scan(/\d+/i);       yield :NUMBER, s.matched
      when s.scan(/\w[\d\w_]*/); yield :IDENTIFIER, s.matched
      when s.skip(/\s/);         # ignore white space

      # hoop-jumping to match various kinds of quotes
      # TODO consolidate these
      when s.scan(SQUOTE_RX)
        str = s.matched
        yield str[0], str[0]
        yield :STRING, s.matched[1...-1]
        yield str[-1], str[-1]

      when s.scan(DQUOTE_RX)
        str = s.matched
        yield str[0], str[0]
        yield :STRING, s.matched[1...-1]
        yield str[-1], str[-1]

      when s.scan(LRQUOTE_RX)
        str = s.matched
        yield :LRQUOTE, str[0]
        yield :STRING, s.matched[1...-1]
        yield :LRQUOTE, str[-1]

      else
        nc = s.getch
        yield nc, nc
    end until s.eos?
  end

  def read_tokens(tokens)
    # @yydebug = true
    en = case tokens
    when Array; tokens.each
    when Enumerable; tokens
    end

    binding.pry if en.is_a? Array
    define_singleton_method(:next_token) do
      en.next
    rescue StopIteration
      nil
    end
    do_parse
  end

  # This method is called when a parse error is found.

  # ERROR_TOKEN_ID is an internal ID of token which caused error. You can get
  # string representation of this ID by calling #token_to_str.

  # ERROR_VALUE is a value of error token.

  # value_stack is a stack of symbol values. DO NOT MODIFY this object.

  # This method raises ParseError by default.

  # If this method returns, parsers enter “error recovering mode”.
  def on_error(error_token_id, error_value, value_stack)
    str = token_to_str error_token_id
    puts "error at #{error_value} with #{value_stack.inspect}"
    # binding.pry unless $dont
    super
  end
...end placeholder_grammar.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    39,     2,    45,    46,    22,    21,    40,     3,    41,    42,
    39,     4,    45,    46,    34,     5,    40,     9,    41,    42,
    43,    44,    26,    27,    29,    30,    39,    10,    45,    46,
    43,    44,    40,    11,    41,    42,    22,    21,    22,    53,
    29,    30,    12,    13,    14,     9,    43,    44,    24,    25,
    31,    49,    54,    55,    56,    57,    58,    59,    60,    61,
    62 ]

racc_action_check = [
    26,     0,    26,    26,    11,    11,    26,     1,    26,    26,
    27,     2,    27,    27,    26,     3,    27,     4,    27,    27,
    26,    26,    21,    21,    22,    22,    58,     6,    58,    58,
    27,    27,    58,     7,    58,    58,    25,    25,    34,    34,
    39,    39,     8,     9,    10,    12,    58,    58,    13,    16,
    24,    28,    43,    44,    45,    47,    48,    50,    54,    55,
    56 ]

racc_action_pointer = [
   -11,     7,    -1,    15,    14,   nil,    14,    19,    27,    27,
    31,     2,    42,    46,   nil,   nil,    31,   nil,   nil,   nil,
   nil,     3,     0,   nil,    33,    34,    -2,     8,    49,   nil,
   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,    16,
   nil,   nil,   nil,    46,    47,    48,   nil,    34,    38,   nil,
    40,   nil,   nil,   nil,    36,    36,    56,   nil,    24,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
   -38,   -38,   -38,   -38,    -2,    64,   -38,    -4,    -6,    -8,
   -38,   -38,   -38,   -38,    -1,    -3,   -10,   -11,   -12,   -13,
   -14,   -21,   -38,    -5,   -38,   -38,   -38,   -38,   -38,   -36,
   -37,    -7,    -9,   -15,   -38,   -17,   -24,   -25,   -26,   -27,
   -28,   -29,   -30,   -38,   -38,   -38,   -34,   -38,   -23,   -35,
   -38,   -18,   -19,   -21,   -38,   -38,   -38,   -20,   -38,   -16,
   -31,   -32,   -33,   -22 ]

racc_goto_table = [
    47,    17,    15,     7,     1,     6,    52,    33,    50,    35,
   nil,    23,   nil,   nil,   nil,    17,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    51,   nil,   nil,   nil,   nil,   nil,
   nil,    63 ]

racc_goto_check = [
    14,     7,     4,     3,     1,     2,    10,    11,    12,    13,
   nil,     3,   nil,   nil,   nil,     7,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,   nil,
   nil,    14 ]

racc_goto_pointer = [
   nil,     4,     1,    -1,    -9,   nil,   nil,   -10,   nil,   nil,
   -28,   -19,   -26,   -17,   -27,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     8,    16,    38,    18,    19,
    20,   nil,   nil,    48,   nil,    36,    37,    28 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 27, :_reduce_none,
  0, 28, :_reduce_none,
  3, 28, :_reduce_none,
  1, 28, :_reduce_none,
  3, 29, :_reduce_none,
  1, 29, :_reduce_none,
  4, 31, :_reduce_7,
  1, 31, :_reduce_8,
  3, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 32, :_reduce_11,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  3, 34, :_reduce_15,
  3, 37, :_reduce_16,
  1, 37, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  4, 35, :_reduce_20,
  1, 36, :_reduce_21,
  3, 40, :_reduce_22,
  1, 40, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_27,
  1, 39, :_reduce_none,
  1, 42, :_reduce_29,
  1, 42, :_reduce_30,
  3, 41, :_reduce_31,
  3, 41, :_reduce_32,
  3, 41, :_reduce_33,
  1, 41, :_reduce_none,
  3, 33, :_reduce_35,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none ]

racc_reduce_n = 38

racc_shift_n = 64

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :IDENTIFIER => 3,
  :LRQUOTE => 4,
  :MAGIC_QUOTED => 5,
  :STRING => 6,
  :BOOLEAN => 7,
  :RANGE => 8,
  :CHAR => 9,
  :false => 10,
  :true => 11,
  "{" => 12,
  "}" => 13,
  "|" => 14,
  "." => 15,
  "[" => 16,
  "]" => 17,
  "," => 18,
  ":" => 19,
  "(" => 20,
  ")" => 21,
  "\"" => 22,
  "'" => 23,
  "X" => 24,
  "x" => 25 }

racc_nt_base = 26

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "IDENTIFIER",
  "LRQUOTE",
  "MAGIC_QUOTED",
  "STRING",
  "BOOLEAN",
  "RANGE",
  "CHAR",
  "false",
  "true",
  "\"{\"",
  "\"}\"",
  "\"|\"",
  "\".\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "\"\\\"\"",
  "\"'\"",
  "\"X\"",
  "\"x\"",
  "$start",
  "cuddled",
  "placeholder",
  "field_path",
  "directives",
  "nstep",
  "directive",
  "extent",
  "keyword",
  "functor",
  "naked",
  "composite_value",
  "array_value",
  "value",
  "values",
  "string",
  "boolean",
  "x" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 42)
  def _reduce_7(val, _values, result)
     self.field_path << val[0]; self.field_path << Integer(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 43)
  def _reduce_8(val, _values, result)
     self.field_path << val[0]
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 48)
  def _reduce_11(val, _values, result)
    self.image_extent = val[0]
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 54)
  def _reduce_15(val, _values, result)
     self.keywords[val[0].to_sym] = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 57)
  def _reduce_16(val, _values, result)
    result = val[1]
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 63)
  def _reduce_20(val, _values, result)
     self.functors[val[0].to_sym] = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 65)
  def _reduce_21(val, _values, result)
     self.keywords[val[0].to_sym] = true
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 70)
  def _reduce_22(val, _values, result)
    result = [*Array(val[0]), *Array(val[2])]
    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 74)
  def _reduce_27(val, _values, result)
    result = Integer val[0]
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 78)
  def _reduce_29(val, _values, result)
    result = false
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 78)
  def _reduce_30(val, _values, result)
    result = true
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 81)
  def _reduce_31(val, _values, result)
    result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 82)
  def _reduce_32(val, _values, result)
    result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 83)
  def _reduce_33(val, _values, result)
    result = val[1]
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 87)
  def _reduce_35(val, _values, result)
     result = {width: val[0], height: val[2]}
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class PlaceholderGrammar
end   # module Office
