#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'


module Office
  class PlaceholderGrammar < Racc::Parser

module_eval(<<'...end placeholder_grammar.racc/module_eval...', 'placeholder_grammar.racc', 91)
  def initialize
    super
    @field_path = []
    @keywords = {}
    @functors = {}
  end

  attr_reader :field_path
  attr_accessor :image_extent

  # really these have the same function but different syntaxes so keep them separate
  attr_accessor :keywords
  attr_accessor :functors

  def to_h
    {
      field_path: field_path,
      image_extent: image_extent,
      keywords: keywords,
      functors: functors,
    }
  end

  def yydebug; true end

  DQUOTE_RX = /"([^"\\]|\\["\\\/bfnrt])*?"/
  SQUOTE_RX = /'([^'\\]|\\['\\\/bfnrt])*?'/
  LRQUOTE_RX = /[“”]([^'\\]|\\['\\\/bfnrt])*?[“”]/

  # The lexer.
  def self.tokenize line
    return enum_for __method__, line unless block_given?

    s = StringScanner.new line
    case
      when s.scan(/true/); yield [:true, 'true']
      when s.scan(/false/); yield [:false, 'false']
      when s.scan(/(\d+)x(\d+)/i)
        yield [:NUMBER, s.captures[0]]
        yield [?x, ?x]
        yield [:NUMBER, s.captures[1]]

      when s.scan(/\d+/i);       yield [:NUMBER, s.matched]
      when s.scan(/\w[\d\w_]*/); yield [:IDENTIFIER, s.matched]
      when s.skip(/\s/);         # ignore white space
      when s.scan(SQUOTE_RX)
        str = s.matched
        yield [str[0], str[0]]
        yield [:STRING, s.matched[1...-1]]
        yield [str[-1], str[-1]]

      when s.scan(DQUOTE_RX)
        str = s.matched
        yield [str[0], str[0]]
        yield [:STRING, s.matched[1...-1]]
        yield [str[-1], str[-1]]

      when s.scan(LRQUOTE_RX)
        str = s.matched
        yield [:LRQUOTE, str[0]]
        yield [:STRING, s.matched[1...-1]]
        yield [:LRQUOTE, str[-1]]

      else
        nc = s.getch
        yield [nc, nc]
    end until s.eos?
  end

  def read_tokens(tokens)
    define_singleton_method(:next_token) { tokens.shift }
    do_parse
  end
...end placeholder_grammar.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    39,     2,    45,     3,    39,    40,    45,    41,    42,    40,
     4,    41,    42,    35,    22,    21,    26,    27,     5,    43,
    44,    29,    30,    43,    44,    39,     9,    45,    22,    21,
    40,    10,    41,    42,    22,    52,    29,    30,    11,    12,
    13,    14,     9,    24,    43,    44,    25,    31,    48,    53,
    54,    55,    56,    57,    58,    59,    60,    61 ]

racc_action_check = [
    26,     0,    26,     1,    27,    26,    27,    26,    26,    27,
     2,    27,    27,    26,    11,    11,    21,    21,     3,    26,
    26,    22,    22,    27,    27,    57,     4,    57,    25,    25,
    57,     6,    57,    57,    35,    35,    39,    39,     7,     8,
     9,    10,    12,    13,    57,    57,    16,    24,    28,    43,
    44,    45,    46,    47,    49,    53,    54,    55 ]

racc_action_pointer = [
   -10,     3,    -1,    18,    23,   nil,    19,    25,    25,    25,
    29,    12,    39,    41,   nil,   nil,    29,   nil,   nil,   nil,
   nil,    -2,    -2,   nil,    31,    26,    -2,     2,    46,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    13,
   nil,   nil,   nil,    44,    45,    46,    32,    36,   nil,    38,
   nil,   nil,   nil,    34,    34,    53,   nil,    23,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
   -36,   -36,   -36,   -36,   -36,    63,   -36,    -3,    -5,    -7,
   -36,   -36,   -36,   -36,    -1,    -2,    -9,   -10,   -11,   -12,
   -13,   -20,   -36,    -4,   -36,   -36,   -36,   -36,   -36,   -34,
   -35,    -6,    -8,   -14,   -15,   -36,   -23,   -24,   -25,   -26,
   -27,   -28,   -29,   -36,   -36,   -36,   -36,   -22,   -33,   -36,
   -17,   -18,   -20,   -36,   -36,   -36,   -19,   -36,   -16,   -30,
   -31,   -32,   -21 ]

racc_goto_table = [
    46,    17,    15,     7,     1,     6,    51,    33,    34,    49,
   nil,    23,   nil,   nil,   nil,    17,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,
    62 ]

racc_goto_check = [
    14,     7,     4,     3,     1,     2,    10,    11,    12,    13,
   nil,     3,   nil,   nil,   nil,     7,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,
    14 ]

racc_goto_pointer = [
   nil,     4,     1,    -1,    -9,   nil,   nil,   -10,   nil,   nil,
   -29,   -19,   -18,   -26,   -27,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     8,    16,    38,    18,    19,
    20,   nil,    47,   nil,   nil,    36,    37,    28 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 26, :_reduce_none,
  3, 27, :_reduce_none,
  1, 27, :_reduce_none,
  3, 28, :_reduce_none,
  1, 28, :_reduce_none,
  4, 30, :_reduce_6,
  1, 30, :_reduce_7,
  3, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  3, 33, :_reduce_14,
  1, 36, :_reduce_none,
  3, 36, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  4, 34, :_reduce_19,
  1, 35, :_reduce_20,
  3, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_26,
  1, 37, :_reduce_none,
  1, 41, :_reduce_28,
  1, 41, :_reduce_29,
  3, 40, :_reduce_none,
  3, 40, :_reduce_none,
  3, 40, :_reduce_none,
  3, 32, :_reduce_33,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none ]

racc_reduce_n = 36

racc_shift_n = 63

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :IDENTIFIER => 3,
  :LRQUOTE => 4,
  :STRING => 5,
  :BOOLEAN => 6,
  :RANGE => 7,
  :CHAR => 8,
  :false => 9,
  :true => 10,
  "{" => 11,
  "}" => 12,
  "|" => 13,
  "." => 14,
  "[" => 15,
  "]" => 16,
  "," => 17,
  ":" => 18,
  "(" => 19,
  ")" => 20,
  "\"" => 21,
  "'" => 22,
  "X" => 23,
  "x" => 24 }

racc_nt_base = 25

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "IDENTIFIER",
  "LRQUOTE",
  "STRING",
  "BOOLEAN",
  "RANGE",
  "CHAR",
  "false",
  "true",
  "\"{\"",
  "\"}\"",
  "\"|\"",
  "\".\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "\"\\\"\"",
  "\"'\"",
  "\"X\"",
  "\"x\"",
  "$start",
  "cuddled",
  "placeholder",
  "field_path",
  "directives",
  "nstep",
  "directive",
  "extent",
  "keyword",
  "functor",
  "naked",
  "composite_value",
  "value",
  "array_value",
  "values",
  "string",
  "boolean",
  "x" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 37)
  def _reduce_6(val, _values, result)
     self.field_path << val[0]; self.field_path << Integer(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 38)
  def _reduce_7(val, _values, result)
     self.field_path << val[0]
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 52)
  def _reduce_14(val, _values, result)
     self.keywords[val[0].to_sym] = val[2]
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 59)
  def _reduce_19(val, _values, result)
     self.functors[val[0].to_sym] = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 61)
  def _reduce_20(val, _values, result)
     self.keywords[val[0].to_sym] = true
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 66)
  def _reduce_26(val, _values, result)
    result = Integer val[0]
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 70)
  def _reduce_28(val, _values, result)
    result = false
    result
  end
.,.,

module_eval(<<'.,.,', 'placeholder_grammar.racc', 70)
  def _reduce_29(val, _values, result)
    result = true
    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

module_eval(<<'.,.,', 'placeholder_grammar.racc', 80)
  def _reduce_33(val, _values, result)
     self.image_extent = {width: val[0], height: val[2]}
    result
  end
.,.,

# reduce 34 omitted

# reduce 35 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class PlaceholderGrammar
end   # module Office
